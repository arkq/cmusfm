.pc
.TH CMUSFM 1 "2022-05-23" "0.1" "Cmusfm standalone scrobbler for the cmus music player"
.SH NAME
cmusfm \- Last.fm standalone scrobbler for the cmus music player.
.SH SYNOPSIS
.B cmusfm
.RI [\| int \| ]
.RI [\| server \|]
.SH OPTIONS
.TP
.BI cmusfm \ int
One has to grant access for the cmusfm in the Last.fm service.
This action might be also required when upgrading to the newer
version with new features.
.TP
.BI cmusfm \ server
Show cmusfm string.
.SH DESCRIPTION
.I cmusfm
is an Open Source tool Last.fm standalone scrobbler for the cmus music player.
.SS Features
.IP \[bu] 2
Listening now notification support
.IP \[bu] 2
Off-line played track cache for later submission
.IP \[bu] 2
POSIX ERE-based file name parser
.IP \[bu] 2
Desktop notification support (optionally)
.IP \[bu] 2
Customizable scrobbling service
.IP \[bu] 2
Small memory footprint
.SS Overview
When discography is correctly tagged - at least artist and title field -
scrobbling needs no further configuration.
However, if this requirement is not met, then one can use POSIX
ERE-based file name parser feature.
But what the heck is this?
.PP
Cmusfm allows to configure regular expression patterns for local files
and for shoutcast streaming services.
The syntax is compatible with the POSIX Extended Regular
Expression
(ERE) with one exception.
Matched subexpression has to be marked with the ? extension
notation.
There are four distinguish types:
.IP \[bu] 2
.B (?A...)
\- match artist name
.IP \[bu] 2
.B (?B...)
\- match album name
.IP \[bu] 2
.B (?N...)
\- match track number
.IP \[bu] 2
.B (?T...)
\- match track title
.PP
All extension types can be used only once, otherwise only the first
occurrence will be used.
Also note, that using matched subexpressions without the extension
notation might result in an unexpected behavior.
Default configuration assumes formats as follows:
.IP \[bu] 2
.B format-localfile = \[dq]\[ha](?A.+) - (?T.+)\[rs].[\[ha].]+$\[dq]
(matches: The Beatles - Yellow Submarine.ogg)
.IP \[bu] 2
.B format-shoutcast = \[dq]\[ha](?A.+) - (?T.+)$\[dq]
(matches:The Beatles - Yellow Submarine)
.PP
Scrobbling behavior and now playing notification can be controlled via
the following self-explainable options (default is \[lq]yes\[rq] for all
of them):
.IP \[bu] 2
.B now-playing-localfile = \[dq]yes\[dq]
.IP \[bu] 2
.B now-playing-shoutcast = \[dq]no\[dq]
.IP \[bu] 2
.B submit-localfile = \[dq]yes\[dq]
.IP \[bu] 2
.B submit-shoutcast = \[dq]no\[dq]
.PP
Cmusfm provides also one extra feature, which was mentioned earlier -
desktop notifications.
In order to have this functionality, one has to enable it during the
compilation stage.
Since it is an extra feature, it is disabled by default in the cmusfm
configuration file too.
Note, that cover art file has to be explicitly stored in the current
track\[cq]s directory - embedded covers are not displayed.
Exemplary configuration might be as follows:
.IP \[bu] 2
.B notification = \[dq]yes\[dq]
.IP \[bu] 2
.B format-coverfile = \[dq]\[ha](cover|folder)\[rs].jpg$\[dq]
.PP
By default cmusfm scrobbles to the Last.fm service.
However, it is possible to change this behavior by modifying
service-api-url and service-auth-url options in the
configuration file.
Afterwards, one should reinitialize cmusfm (cmusfm init) in
order to authenticate with new scrobbling service.
In order to use Libre.fm as a scrobbling service,
one shall use configuration as follows:
.IP \[bu] 2
.B service-api-url = \[dq]https://libre.fm/2.0/\[dq]
.IP \[bu] 2
.B service-auth-url = \[dq]https://libre.fm/api/auth\[dq]
.SH CONFIGURATION
Before usage with the cmus music player, one has to grant access for the
cmusfm in the Last.fm service.
To do so, simply run cmusfm with the init argument and follow
the instruction.
This action might be also required when upgrading to the newer version
with new features.
.IP
.nf
.B cmusfm \fI int \fR
.fi
After that you can safely edit \fI/.config/cmus/cmusfm.conf\fR
configuration file.
.PP
Above statement is not valid if one has
inotify subsystem available.
.PP
As a final step (after the access is granted in the Last.fm service) one
should set cmusfm as a status display program for cmus.
This can be done by starting cmus and typing in the main window:
.IP
.nf
.B :set status_display_program=cmusfm
.fi
.SH FILES
.TP
.I ~/.config/cmus/cmusfm.conf
cmusfm configuration file.
.SH AUTHOR
cmusfm was written by Arkadiusz Bokowy and is copyright 2014.
Many others have contributed code and bug reports.
.SH DISTRIBUTION
The canonical repository for cmusfm is at GitHub:
https://github.com/Arkq/cmusfm/ It is distributed under the GNU General Public
License version 3 or (at your option) any later version.
https://www.gnu.org/licenses/gpl-3.0.en.html This software is offered
as-is with no warranty or liability.
If you find a bug or would like cmusfm to do something it doesn\[cq]t
currently do, please visit the above GitHub website and report your
concerns.
.SH "SEE ALSO"
.BR cmus (1)
